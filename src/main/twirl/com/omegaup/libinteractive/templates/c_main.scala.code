@import com.omegaup.libinteractive.idl.IDL
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.target.C
@import com.omegaup.libinteractive.target.Options
@(c: C, options: Options, idl: IDL)
/* @c.message */
#define _XOPEN_SOURCE 600
#include <fcntl.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
@if(options.transact) {

#include <sched.h>
#include <sys/mman.h>

}
#include "@(options.moduleName).h"

#if defined(__GNUC__)
#define __NOINLINE __attribute__((noinline))
#else
#define __NOINLINE
#endif

#if defined(_WIN32)
#if !defined(PRIuS)
#define PRIuS "Iu"
#endif
#else
#if !defined(PRIuS)
#define PRIuS "zu"
#endif
// Windows requires this flag to open files in binary mode using the
// open syscall.
#define O_BINARY 0
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if defined(_WIN32)
// declared in windows.h
void mainCRTStartup();
#else
// declared in crt1.o
void _start();
#endif

void __entry();

@if(options.transact) {
@c_transact_functions(options.verbose)

static struct interface @idl.interfaces.map(c.transactName).mkString(", ");
} else {
@c_stream_functions(options.verbose)

static struct __stream @idl.interfaces.flatMap(interface =>
		List(c.pipeName(interface, true), c.pipeName(interface, false))
).mkString(", ");
}

#ifdef __cplusplus
}
#endif

static void __NOINLINE __libinteractive_init() {
@if(options.transact) {
	cpu_set_t mask;
	CPU_ZERO(&mask);
	CPU_SET(0, &mask);
	sched_setaffinity(0, sizeof(mask), &mask);

@for(interface <- idl.interfaces) {
	__interface_init(&@c.transactName(interface), 1, "@interface.name",
		"@c.transactFilename(interface)", "@c.shmFilename(interface)", 65536);
}
} else {
@for(interface <- idl.interfaces) {
	openstream(&@c.pipeName(interface, true), "@c.pipeFilename(interface, idl.main, true)", O_WRONLY);
	openstream(&@c.pipeName(interface, false), "@c.pipeFilename(interface, idl.main, false)", O_RDONLY);
}
}
}

void __entry() {
	#if !defined(_WIN32)

	// _start expects the stack in a very specific configuration.
	#if defined(__x86_64__)
	__asm__(
		"popq %%rbp\n"	// Remove %rbp from the stack that gcc helpfully added.
		"pushq %%rdx\n" // Store %rdx since we will need it later.
		:::
	);
	#else
	__asm__(
		"popl %%ebp\n"	// Remove %ebp from the stack that gcc helpfully added.
		"pushl %%eax\n" // Save all registers that contain stuff _start expects.
		"pushl %%edx\n"
		"pushl %%ecx\n"
		:::
	);
	#endif // __x86_64__

	__libinteractive_init();

	// Perform regular libc startup
	// Restore all arch-specific registers.
	#if defined(__x86_64__)
	__asm__ (
		"popq %%rdx\n"
		:::
	);
	#else
	__asm__ (
		"popl %%ecx\n"
		"popl %%edx\n"
		"popl %%eax\n"
		:::
	);
	#endif // __x86_64__
	// We cannot call _start since that would add stuff to the stack.
	// Jump to it and everything should be exactly as it expects it to be.
	__asm__ (
		"jmp _start@@plt\n"
		:::
	);

	#else

	// The Windows case is much simpler, fortunately :)
	__libinteractive_init();
	// Perform regular libc startup
	mainCRTStartup();

	#endif // _WIN32
}

@for(interface <- idl.interfaces) {
@if(options.transact) {
@c_message_loop_transact(c, options, interface, idl.main, c.transactName(interface))
} else {
@c_message_loop(c, options, interface, idl.main,
		c.pipeName(interface, true), c.pipeName(interface, false))
}

@for(function <- interface.functions) {
@if(options.transact) {
@c_shim_transact(c, options, function, interface, idl.main, c.transactName(interface))
} else {
@c_shim(c, options, function, interface, idl.main,
	c.pipeName(interface, true), c.pipeName(interface, false))
}

}
}
