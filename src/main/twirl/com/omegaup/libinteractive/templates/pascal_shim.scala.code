@import com.omegaup.libinteractive.idl.ArrayType
@import com.omegaup.libinteractive.idl.Function
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.idl.ParameterLength
@import com.omegaup.libinteractive.idl.PrimitiveType
@import com.omegaup.libinteractive.target.Options
@import com.omegaup.libinteractive.target.Pascal
@(pascal: Pascal, options: Options, function: Function, callee: Interface, caller: Interface, outfd: String, infd: String)
@pascal.declareFunction(function)
var
	__msgid: LongWord;
	__cookie: LongWord;
	__cookie_result: LongWord;
@if(function.returnType != PrimitiveType("void")) {
	__result: @pascal.formatType(function.returnType);
}
begin
@if(options.verbose) {
	Writeln(ErrOutput, #9'invoking @function.name begin');
}
	__msgid := $@("%x" format pascal.functionIds((caller.name, callee.name, function.name)));
	__cookie := $@("%x" format pascal.rand.nextInt);

	@(outfd).WriteBuffer(__msgid, sizeof(__msgid));
@for(param <- function.params) {
@param.paramType match {
case array: ArrayType => {
	@(outfd).WriteBuffer(@(param.name)@array.lengths.map(_ => "[0]").mkString, @pascal.fieldLength(array));
}
case primitive: PrimitiveType => {
	@(outfd).WriteBuffer(@param.name, sizeof(@param.name));
}
}
}
	@(outfd).WriteBuffer(__cookie, sizeof(__cookie));

	__message_loop_@(callee.name)(__msgid, @function.noReturn);

@if(function.returnType != PrimitiveType("void")) {
	__read_full(@infd, __result, sizeof(__result));
}
	__read_full(@infd, __cookie_result, sizeof(__cookie_result));
	if (__cookie <> __cookie_result) then
	begin
		Writeln(ErrOutput, 'invalid cookie');
		Halt(1);
	end;
@if(options.verbose) {
	Writeln(ErrOutput, #9'invoking @function.name end');
}
@if(function.returnType != PrimitiveType("void")) {
	@function.name := __result;
}
end;
