@import com.omegaup.libinteractive.idl.ArrayType
@import com.omegaup.libinteractive.idl.Function
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.idl.PrimitiveType
@import com.omegaup.libinteractive.target.Options
@import com.omegaup.libinteractive.target.Python
@(python: Python, options: Options, function: Function, callee: Interface, caller: Interface, outfd: String, infd: String)
@python.declareFunction(function):
@if(options.verbose) {
	print>>sys.stderr, "\tinvoking ${function.name} begin"
}
	__msgid = 0x@("%x" format python.functionIds((caller.name, callee.name, function.name)))
	__cookie = 0x@("%x" format python.rand.nextInt)
	@(outfd).write(struct.pack('I', __msgid))
@for(param <- function.params) {
@param.paramType match {
case primitive: PrimitiveType => {
	@(outfd).write(struct.pack(@python.structFormat(param.paramType), @param.name))
}
case array: ArrayType => {
@python.writeArray(outfd, param.name, array.primitive, array.lengths)
}
}
}
	@(outfd).write(struct.pack('I', __cookie))
	@(outfd).flush()

	__message_loop(__msgid, @if(function.noReturn) { True } else { False })

@if(function.returnType != PrimitiveType("void")) {
	__ans = struct.unpack(@python.structFormat(function.returnType), @{infd}.read(@python.fieldLength(function.returnType)))[0]
}
	__cookie_result = struct.unpack('I', @(infd).read(4))[0]
	if __cookie != __cookie_result:
		print>>sys.stderr, "invalid cookie"
		sys.exit(1)

@if(options.verbose) {
	print>>sys.stderr, "\tinvoking ${function.name} end"
}

@if(function.returnType != PrimitiveType("void")) {
	return __ans
}
