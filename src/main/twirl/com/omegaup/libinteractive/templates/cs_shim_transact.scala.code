@import com.omegaup.libinteractive.idl.ArrayType
@import com.omegaup.libinteractive.idl.Function
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.idl.PrimitiveType
@import com.omegaup.libinteractive.target.CSharp
@import com.omegaup.libinteractive.target.Options
@(cs: CSharp, options: Options, function: Function, callee: Interface, caller: Interface, transactName: String)
	public static @(cs.declareFunction(function))
	{
		try {
@if(options.verbose) {
			Console.Error.WriteLine("invoking @function.name begin");
}
			const int __msgid = 0x@("%x" format cs.functionIds((caller.name, callee.name, function.name)));
			const int __cookie = 0x@("%x" format cs.cookieId);

			Message __message = @(transactName).BuildMessage();
			__message.Allocate(__msgid, @function.params.foldLeft(4L)(_+_.paramType.byteSize));
@for(param <- function.params) {
@param.paramType match {
case primitive: PrimitiveType => {
			__message.@(cs.writePrimitive(primitive))(@param.name);
}
case array: ArrayType => {
@cs.writeArray("__message", param, array, 3)
}
}
}
			__message.Write(__cookie);

			switch (__message.Send()) {
				case 0:
@if(function.noReturn) {
					Environment.Exit(0);
}
					goto case -1;
				case -1:
					Console.Error.WriteLine("Confused about exiting");
					Environment.Exit(242);
					break;
				case 1:
					break;
			}
			__message.Receive();
			@(caller.name)_entry.__message_loop_@(callee.name)(
					__message, __msgid, @function.noReturn);

@if(function.returnType != PrimitiveType("void")) {
			@cs.formatType(function.returnType) __ans =
				__message.@(cs.readPrimitive(function.returnType))();
}
			int __cookie_result = __message.ReadInt32();
			if (__cookie != __cookie_result) {
				Console.Error.WriteLine("invalid cookie");
				Environment.Exit(240);
			}
@if(options.verbose) {
			Console.Error.WriteLine("invoking @function.name end");
}
@if(function.returnType != PrimitiveType("void")) {
			return __ans;
}
		} catch (IOException __e) {
			Console.Error.WriteLine(__e);
			Environment.Exit(1);
			throw new SystemException(); // Needed to compile.
		}
	}
